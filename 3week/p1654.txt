1. 문제 인식

랜선 개수 n과 필요한 랜선 개수 k를 입력받고 n개만큼 랜선길이를 입력받아서 랜선을 잘라서 k개로 만들 수 있는 최대 길이를 구하는 문제입니다.

2. 문제 유형 파악

k 개수로 랜선이 나올 때 가장 길이가 긴 경우를 구해야 하므로, 가장 긴 랜선의 중간값으로 각 랜선을 잘라서 나온 개수를 토대로 가장 긴값 key로 하여 조건에 맞을 때 최대값이 나올 때 까지 탐색하면 최대값을 도출할 수 있기 때문에 이진탐색을 이용한 parametric search로 문제를 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 랜선 개수 n과 필요한 랜선 개수 k를 입력받고, n크기의 정수형 배열 lan을 선언함.
    2) 주어진 랜선의 최대 길이를 담을 max 정수형 변수를 선언함.
    3) i가 0부터 n-1까지 증가하며 반복하는 반복문에서 다음을 반복함.
        (1) 랜선의 길이를 입력받아 lan[i]에 할당함.
        (2) lan[i]가 max보다 크다면 max에 lan[i]를 할당함.
    4) lan 배열을 퀵정렬로 정렬함.
    5) lan 배열과 조건인 k를 이용하여 parametric search를 수행한 결과를 출력함.

    parametric search를 위해 binarySearch 함수와 isPos 함수를 생성함.

    isPos 함수에서는 각 랜선길이를 중간값으로 나누어 나온 수를 저장할 tmp변수를 선언하고 그 총합이 k보다 크거나 같으면 참을 리턴하고 아니라면 거짓을 리턴함.

    binarySearch함수에서는 중간값을 저장할 mid 변수, 왼쪽을 가리키는 left, 오른쪽을 가리키는 right 변수를 생성함. 이때, 랜선의 길이는 2^31 - 1 과 같거나 작기때문에 중간값을 구하는 과정에서 오버플로우가 발생할 수 있으므로 long long int 자료형으로 선언함.
    left는 랜선의 최소 길이는 1로 정의하고 right는 랜선의 최대 길이인 max로 정의함.
    left가 right보다 작거나 같을때 다음을 반복함.
        mid에 (left + right) / 2를 대입함.
        isPos 함수의 리턴값이 참이라면 left에 mid + 1을 대입함.
        아니라면 right에 mid - 1을 대입함.
    결과인 mid를 출력하기 위해 left - 1을 리턴함.
