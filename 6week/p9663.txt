1. 문제 인식

N X N 체스판 위에 N개의 퀸을 놓을 때, 서로 공격할 수 없도록 퀸을 배치하는 경우의 수를 구하는 문제입니다.

2. 문제 유형 파악

퀸을 배치하게 되면, 그 퀸과 같은 행, 같은 열, 그리고 대각선으로는 배치할 수 없습니다.
그러므로 같은행,열 대각선에 배치하지 않으면서 서로 공격할 수 없는 형태로 배치할려면 저 조건을 제외한 부분에 퀸을 배치하며 경우의수를 줄여나갑니다.
결과값으로는 모든 경우의 수를 구해야 하므로, 백트래킹으로 문제를 해결합니다. (브루트포스로 해결하게 되면 안되는 경우의 수임에도 계산을 해버림.)

3. 다이어그램 또는 알고리즘을 나열

    1) 결과값을 저장할 res과 n, 각 열마다 가능한 행위치를 저장할 locate 정수형 1차원배열을 생성한다.. 이때, res는 0으로 초기화.
    2) n을 입력받는다.
    3) Queen(0)을 호출한다.
    4) res를 출력한다.

    Queen() 함수는 열을 가리키는 정수형 변수 x를 인자로 가지는 함수입니다.
    x와 n이 같으면 res에 1을 증가합니다. (Queen 함수는 현재 x값의 열에 퀸을 배치해서 문제의 조건에 맞을 때, 수행한다. 따라서 x와 n이 같으면 n * n 체스판에서 마지막 퀸을 뒀기때문에 경우의수 한개 완성.)
    위 조건이 거짓이라면 다음을 수행한다
        i가 0부터 n-1 까지 증가하며 반복하는 반복문에서 다음을 반복한다.
            locate[x]에 i를 할당한다.
            check[i]가 true를 반환하면 Queen(x+1)을 호출한다.

    check() 함수는 현재 배치된 퀸이 조건에 맞는지 검사해주는 함수입니다.
    i가 0부터 x-1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다. (x-1까지 함으로써 같은 열은 배치가 안됨. 어차피 한 열에 배치하고 나면 Queen(x+1)로 열을 1 증가하기때문에 검사하지 않아도됨.)
        locate[i]가 locate[x]랑 같거나, locate[x] - locate[i]의 절대값과 x - i의 값이 같다면 false를 반환합니다.    (locate[i] == locate[x]는 같은 행에 배치되어있는지 확인. 그 뒤 조건은 대각선위치에 배치됐는지 확인. ex) a,b의 대각선의 점 x,y 가 있을때 좌표는 반드시 x-a = y-b를 만족함.)
    true를 반환합니다.