1. 문제 인식

체스판 위에 한개의 나이트가 주어졌을 때, 그 나이트의 위치와 나이트가 이동하려고 하는 칸의 좌표가 주어지면 그 칸으로 이동하는데 몇번의 움직임이 필요한지 구하는 문제입니다.

2. 문제 유형 파악

문제에서 나이트가 목표 좌표로 최소 몇번만에 이동할 수 있는지를 요구하고 있기 때문에, 최단거리를 찾는데에 있어서 편차가 적은 BFS를 채택하여 문제를 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 테스트 케이스의 개수 n과 체스판의 한변의 길이 l, 결과값을 저장할 res 2차원 정수 배열과, 방문여부를 저장할 visited 2차원 정수 배열, BFS를 위한 큐를 선언하고, 나이트가 움직이는 8방향으로의 x와 y값 변화량을 저장하는 knightX, knightY 1차원 정수 배열을 선언합니다.
    2) n을 입력받는다.
    3) i가 0부터 n-1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) l을 입력받는다.
        (2) 현재 나이트 위치를 입력받을 curX, curY를 선언하고, 움직이고자 하는 목표좌표를 입력받을 targetX, targetY를 선언하고 각각 입력받는다.
        (3) curX와 curY를 큐에 삽입한다. (1번에서 큐를 선언할 때, x좌표와 y좌표를 받아야 하기 때문에 pair<int, int>형태로 선언한다.)
        (4) BFS(targetX, targetY)를 호출한다.
        (5) i가 0부터 299까지 증가하며 반복하는 반복문에서 다음을 반복한다.                 (다음 테스트 케이스를 위해 초기화작업)
            [1] k가 0부터 299까지 증가하며 반복하는 반복문에서 다음을 반복한다.
                1. visited[i][k]를 0으로 초기화한다.
                2. res[i][k]를 0으로 초기화한다.
        (6) q가 공백인지 검사하고 공백이 아니라면, 큐가 공백이 될 때까지 큐에서 삭제를 반복한다.

    BFS함수는 인자로 tarX, tarY를 받는 함수입니다.
    큐가 공백이 아닐때 다음을 반복합니다.
        현재 위치를 저장할 x, y를 선언하고 각각 q.front().first, q.front().second를 대입한다. (초기 BFS를 호출하기 전 curX와 curY를 큐에 삽입함. 후에 큐에 다음으로 방문한 위치의 x와 y를 삽입하기 때문에 현재 위치를 저장함.)
        visited[x][y]에 1을 대입합니다. (방문완료)
        q.pop()을 수행합니다.
        이때, x와 tarX가 같고 y와 tarY가 같다면, res[x][y]를 출력하고 함수를 벗어납니다.    (목표좌표에 도달했기 때문에, 결과를 출력 후 탈출.)
        i가 0부터 7까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            다음으로 방문할 좌표를 저장할 nextX, nextY를 선언하고, 각각 x + knightX[i], y + knightY[i]를 대입합니다.
            nextX가 0보다 크거나 같고, l보다 작고, nextY가 0보다 크거나 같고, l보다 작고, visited[nextX][nextY]가 0인지 검사합니다. (체스판을 벗어났는지 확인하고, 방문여부를 확인)
            위 조건이 참이라면, visited[nextX][nextY]에 1을 대입하고, res[nextX][nextY]에 res[x][y] + 1을 대입합니다. 그리고 큐에 nextX와 nextY를 삽입합니다. (나이트를 한번 이동했으므로, res값이 1 증가해야함. 그리고 nextX와 nextY를 큐에 삽입함으로써 현재 위치값 갱신.)