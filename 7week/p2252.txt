1. 문제 인식

N명의 학생들을 키 순서대로 줄을 세우는 프로그램을 작성하는 문제입니다.

2. 문제 유형 파악

입력으로 학생의 번호 A,B가 주어지는데, 이는 A가 B의 앞에 서야하는 순서를 의미합니다.
즉, 이는 각 학생간의 상하관계가 입력으로 주어지는 것으로, 출력에서 답이 여러가지로 나올 수 있습니다. (why? 1 3, 2 3 을 입력받았을때 3이라는 학생은 무조건 1학생과 2학생 위에 있어야하지만, 1과 2학생간의 상하관계는 주어지지 않았기 때문에 1 2 3 혹은 2 1 3 형태로 나올 수 있습니다.)
따라서, 이 문제는 위상정렬로 문제를 해결합니다. (학생들의 번호로 그래프를 구성하기에 대칭관계의 성립이 어렵고, 제일 키큰 학생이 가장 키가 작은 학생의 앞에 설 수 없으므로, 순환이 될 수 없다. 그러므로, 위상정렬 알고리즘이 사용 가능하다고 볼 수 있다.)

3. 다이어그램 또는 알고리즘을 나열

    1) 학생들의 수를 받을 정수형 변수 n과 키를 비교한 횟수를 담을 정수형 변수 m, 두 학생의 번호를 저장할 정수형 변수 a, b를 선언한다.
    2) 입력받은 그래프를 담을 인접리스트 graph를 선언한다.
    3) BFS를 위한 큐를 선언하고, 각 정점의 방문여부를 저장할 일차원배열 visited와 각 노드의 진입차수를 저장할 일차원 배열 indgree를 선언한다. (진입차수가 필요한 이유는 위상정렬은 상하관계를 정의해둔 그래프에서 정렬을 하는 것이기에, 하위 단계의 노드를 다 방문한 후에 상위 단계의 노드를 방문할 수 있습니다.(후위 순회와 유사) 
                                                                                                                                    진입차수가 없게된다면, BFS의 순회결과는 상하관계가 지켜지지 않을 가능성이 높아 이건 위상정렬로 보기 어렵습니다. 따라서 진입차수를 이용하여 정렬합니다.)
    4) n, m을 입력받습니다.
    5) i가 0부터 n-1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) a, b를 입력받습니다.
        (2) graph[a]에 b를 push합니다.      (대칭관계는 성립하면 안되므로 graph[b].push_back(a)는 하지 않습니다.)
        (3) indgree[b]에 1을 더합니다. (a에서 b로 가는 관계이므로, b가 더 상위관계에 속합니다. 그러므로 b의 진입차수를 1 증가시켜줍니다. b가 상위인 이유로는 입력에서 앞에 서야 하는 학생이 a로 입력이 들어오고 그 뒤에 서는 학생이 b로 들어오기 때문에 b가 더 상위입니다.)
    6) BFS(n)을 수행합니다.

    BFS함수는 학생수 n을 인자로 가지는 함수입니다.

    i가 1부터 n까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        indgree[i]가 0이라면, 큐에 i를 push합니다.  (함수의 첫 시작때 수행하는것으로, 시작노드를 큐에 push해줍니다. 시작노드는 당연히 진입차수가 0)
    
    큐가 공백이 아니라면 다음을 반복합니다.
        큐의 front를 저장할 idx 정수형 변수를 선언하고 q.front()로 초기화합니다.
        q.pop()을 수행합니다. (값을 위에서 가져왔으므로.)
        idx를 출력합니다. (현재 하위레벨의 노드를 순회중이므로 현재 idx를 출력하면 됨.)

        i가 0부터 graph[idx].size()-1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            indgree[graph[idx][i]] 가 1이라면, 큐에 graph[idx][i]를 push합니다. (현재 반복문을 들어오기 전에 노드 하나를 방문하고 출력했으므로, 상위단계의 진입차수는 1개씩 줄어듭니다. 그러므로 차수가 1인 노드는 0이 될 예정이므로 큐에 넣어줍니다.)
            indgree[graph[idx][i]] 가 0보다 크다면, indgree[graph[idx][i]] 에서 1을 감소합니다. (위에서 서술.)