1. 문제 인식

N개의 문제가 있고, M개의 문제의 정보가 주어집니다. 문제의 정보는 a의 문제를 b보다 먼저 푸는게 좋다는 정보를 가지고 있습니다.
이때, 다음 조건에 따라 풀어야하는 순서대로 출력하는 문제입니다.
    조건 1. N개의 문제 모두 풀어야한다.
    조건 2. 먼저 푸는 것이 좋은 문제가 있는 문제는 먼저 푸는 것이 좋은 문제를 먼저 풀어야한다.
    조건 3. 가능하면 쉬운 문제부터 풀어야한다. (문제 번호가 1에 가까울수록 쉬운문제.)

2. 문제 유형 파악

먼저 푸는것이 좋은 문제가 있다면, 그 문제부터 풀고 다음문제로 넘어가야합니다. 따라서 여기서 문제의 상하관계가 정의되는 것으로 볼때, 위상정렬로 문제를 해결합니다.
하지만, 일반적인 큐에 값을 담고 BFS를 시행하면 3번조건이 맞지 않는 문제가 생깁니다. 그러므로, 쉬운문제는 1에 가깝기 때문에 우선순위 큐의 최소힙을 사용하여 BFS순회를 합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 그래프 정보를 저장하기위한 인접리스트 graph를 선언합니다.
    2) BFS순회를 위한 우선순위 큐 (최소힙) q를 선언하고, 각 노드의 진입차수를 저장할 일차원배열 indgree를 선언합니다.
    3) 문제의 번호를 저장할 정수형 변수 n과 문제 정보의 개수를 저장할 정수형 변수 m, 문제 정보의 문제 쌍을 저장할 정수형 변수 a, b를 선언합니다.
    4) n과 m을 입력받습니다.
    5) i가 0부터 m-1까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) a,b를 입력받습니다.
        (2) graph[a]에 b를 push합니다.
        (3) indgree[b]에 1을 더합니다. (진입차수 증가.)
    6) BFS(n) 함수를 호출합니다.

    BFS(int size) 함수는 문제의 수 N을 인자로 가지는 함수입니다.

    i가 1부터 size까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        indgree[i]가 0이라면, 최소힙에 i를 push합니다.  (진입차수 0인 문제들 부터 삽입.)

    큐가 공백이 아니라면 다음을 반복합니다.
        큐의 top을 저장할 idx 정수형 변수에 q.top()을 저장합니다.
        q.pop() 을 수행합니다.
        idx를 출력합니다.

        i가 0 부터 graph[idx].size() - 1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            indgree[graph[idx][i]]가 1이라면, graph[idx][i]를 큐에 삽입합니다.  (진입차수가 0이 될 예정이므로.)
            indgree[graph[idx][i]]가 0 보다 크다면, indgree[graph[idx][i]]에서 1 감소합니다. (하나 방문해서 출력했으니까.)