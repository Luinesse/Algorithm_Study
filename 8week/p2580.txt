1. 문제 인식

스도쿠의 빈칸을 채워 모든 빈칸이 채워진 최종 결과를 출력하는 문제입니다.

2. 문제 유형 파악

스도쿠의 칸은 81칸으로 정해져있고, 요구된 시간 제한은 1초입니다.
O(N^2)으로 실행해도 1초를 초과하지 않으므로, 이 문제는 백트래킹으로 해결해도 문제가되지 않습니다. (81칸을 1~9를 다채워보면서 검사.)
따라서, 백트래킹으로 문제를 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 스도쿠에서 빈칸의 행과 열을 저장할 벡터 zero를 선언합니다.
    2) 스도쿠 값들을 저장할 2차원 배열 table을 선언합니다.
    3) i가 0부터 8까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) k가 0부터 8까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            [1] table[i][k]를 입력받습니다.
            [2] table[i][k]가 0이라면, zero에 push합니다.
    4) solve(zero, table, 0)을 호출합니다.
    5) i가 0부터 8까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) k가 0부터 8까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            [1] table[i][k]를 출력합니다.
        (2) 개행문자를 출력합니다.

    solve 함수는 빈칸의 행과 열을 저장한 벡터 zero와 스도쿠 값이 있는 table 2차원배열, 현재 벡터 인덱스 위치를 확인할 complete를 인자로 가지고, bool을 리턴합니다.
        zero의 사이즈가 complete와 같다면 true를 리턴합니다.    (모든 0을 다 채웠음.)
        zero[complete].first를 row에 저장합니다.
        zero[complete].second를 col에 저장합니다.

        i가 1부터 9까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            isPos(table, row, col, i)가 true를 리턴하면 다음을 수행합니다.          (i값이 대입됐을때, 가능한가 ?)
                table[row][col]에 i를 대입합니다.
                solve(zero, table, complete + 1)의 리턴값이 true라면 true를 리턴합니다.         (재귀적으로 값을 대입함.)

        table[row][col]에 0을 대입합니다.           (여기에 도달하면 현재 들어간 값은 조건에 맞지않음.)
        false를 리턴합니다.                         (따라서, false를 리턴하고 백트래킹 방식으로 그 전 함수에서 다른값 대입.)

    isPos 함수는 스도쿠 값이 있는 table 2차원 배열과 행의 값 row, 열의 값 col, 검사하려는 숫자 val을 인자로 가지고, bool을 리턴합니다.
        i가 0부터 8까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
            table[row][i] 가 val과 같고, i가 col과 같지 않다면, false를 리턴합니다. (같은 행에 중복되는 숫자가 있는지 판별 + 검사하고자 하는 위치가 아닐때도 false)
            table[i][col] 이 val과 같고, i가 row와 같지 않다면, false를 리턴합니다. (같은 열에 같은 숫자가 있는지 판별)

        3*3 칸에서도 중복을 검사해야하므로 다음 값들을 정의함.
            (row / 3) * 3 을 minR에 대입함.             (현재칸이 속해있는 3*3 칸의 최소 인덱스값을 구함.)
            minR + 2 를 maxR에 대입함.                  (위에서 구한 값에 2더하면 최대값. 아래는 이하 동문.)
            (col / 3) * 3 을 minC에 대입함.
            minC + 2 를 maxC에 대입함.

        i가 minR부터 maxR까지 증가하며 반복하는 반복문에서 다음을 반복함.
            k가 minC부터 maxC까지 증가하며 반복하는 반복문에서 다음을 반복함.
                table[i][k]가 val과 같고, i가 row랑 같지 않으며, k가 col과 같지 않다면, false를 리턴함.
        
        true를 리턴함. (위 조건에 다 안걸렸으니까)