1. 문제 인식

n개의 수가 주어졌을 때, 수의 변경이 빈번히 일어나고, 그 중간의 어떤 구간의 곱을 1000000007로 나눈 나머지를 출력하는 문제입니다.

2. 문제 유형 파악

앞서 해결했던 구간 합 문제에서 변형된 문제로 동일하게 세그먼트 트리로 문제를 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 나누어야할 수 1000000007 를 상수형 변수 MOD에 저장합니다.
    2) 수를 저장할 1차원배열 arr과 구간곱을 저장할 1차원배열 seg를 선언합니다.
    3) 수의개수를 저장할 정수형 변수 n과 수의 변경이 일어나는 횟수를 저장할 정수형 변수 m, 구간의 곱을 구하는 횟수를 저장할 정수형 변수 k를 선언합니다.
    4) 연산을 위해 정수형 변수 a, b, c를 선언합니다.
    5) n, m, k를 입력받습니다.
    6) i가 0부터 n-1 까지 증가하며 반복하는 반복문에서 arr[i]를 입력받습니다.
    7) Init(0, n-1, 1)을 호출합니다.
    8) i가 0부터 m + k - 1 까지 증가하며 반복하는 반복문에서 다음을 반복합니다.
        (1) a, b, c를 입력받습니다.
        (2) a가 1이라면, update(0, n-1, 1, b - 1, c) 를 호출합니다.
        (3) (2)의 조건에서 부합하지 않는다면, Multiply(0, n-1, 1, b - 1, c - 1) 의 리턴값을 출력합니다.

    Init 함수는 시작인덱스 start, 마지막 인덱스 end, 현재 노드의 인덱스 nodeNum을 인자로 가지는 함수이고, long long int를 리턴합니다.
        start와 end가 같다면, seg[nodeNum]에 arr[start]를 대입하고 리턴합니다.  (한개의 원소를 가리키는 경우.)
        구간을 반으로 나누기 위해 정수형 변수 mid에 (start + end) / 2를 대입합니다. (트리의 형태)
        seg[nodeNum]에 (Init(start, mid, nodeNum * 2) * Init(mid + 1, end, nodeNum * 2 + 1)) % MOD 를 대입 후 리턴합니다.   (구간곱을 구하기 때문에 두 개의 노드를 곱하고 MOD로 모듈러 연산을 취함. 트리의 형태를 띄기때문에 각 Init함수의 nodeNum은 nodeNum * 2, nodeNum * 2 + 1로 지정.)

    Multiply 함수는 시작인덱스 start, 마지막 인덱스 end, 현재 노드의 인덱스 nodeNum, 구간곱을 구하려는 시작점인 left, 끝점인 right를 인자로 가지는 함수이고, long long int를 리턴합니다.
        left가 end보다 크거나, right가 start보다 작은 경우, 1를 리턴합니다. (구하려는 구간이 현재 노드의 구간을 벗어남. 구간합 처럼 0을 리턴하면 0을 곱해버리니까 주의)
        left가 start보다 작거나 같고, right가 end보다 크거나 같다면, seg[nodeNum]을 리턴합니다. (구하려는 구간이 현재 노드의 구간을 다 포함하므로, 저장된 값을 그대로 리턴하면됨.)
        위에서 안걸린 경우, 구하려는 구간이 현재 노드의 구간과 겹치기 때문에 구간을 반으로 나누어서 구합니다. 따라서 구간을 반으로 나누기 위해 정수형 변수 mid에 (start + end) / 2 를 대입합니다.
        (Multiply(start, mid, nodeNum * 2, left, right) * Multiply(mid + 1, end, nodeNum * 2 + 1, left, right)) % MOD를 리턴합니다.     (두 구간의 곱을 구하여 리턴.)

    Update 함수는 시작인덱스 start, 마지막 인덱스 end, 현재 노드의 인덱스 nodeNum, 업데이트할 인덱스 targetIdx, 업데이트할 값 val를 인자로 가지는 함수입니다.
        targetIdx가 start보다 작거나 targetIdx가 end보다 크다면 리턴합니다.     (아무 수행도 안함. 범윌르 벗어낫기 때문에.)
        start와 end가 같은 경우 seg[nodeNum]에 val을 대입하고 리턴합니다.       (한개의 원소를 가리킴. 값을 업데이트하고 리턴함. 부모 노드의 값 업데이트는 아래에서 수행.)
        위의 조건에서 걸리지 않은 경우, 구간을 반으로 나누어서 계산해야 하므로, 이를 위한 정수형 변수 mid에 (start + end) / 2를 대입합니다.
        update(start, mid, nodeNum * 2, targetIdx, val)을 호출합니다.
        update(mid + 1, end, nodeNum * 2 + 1, targetIdx, val)을 호출합니다.         (재귀적으로 targetIdx를 탐색.)
        seg[nodeNum]에 (seg[nodeNum * 2] * seg[nodeNum * 2 + 1]) % MOD를 대입합니다.        (업데이트된 값을 바탕으로 부모 노드의 값을 업데이트.)