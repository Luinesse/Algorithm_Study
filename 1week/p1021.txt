1. 문제 인식

큐의 크기 N과 뽑아내려는 수의 개수 M이 입력으로 주어지고, 뽑아내려고 하는 수의 위치를 M번 입력받습니다. 이때, 원소를 뽑아내기위해 큐를 왼쪽으로 한칸 이동 혹은 오른쪽으로 한칸 이동 하는 작업을 최소 몇번 수행하여야 하는지를 모두 카운트해서 출력하는 문제입니다.

2. 문제 유형 파악

이 문제는 뽑아내려는 수의 인덱스 위치를 입력받고 이를 찾기위해 왼쪽 혹은 오른쪽으로 큐를 회전시켜야합니다. 이 과정에서 가장 끝점에 있는 원소는 반대편 첫번째 원소로 이동해야하므로, 양쪽에서 push,pop이 가능한 덱 자료구조를 사용하여 문제를 해결해야 합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 큐의 크기 N과 뽑아내려는 수의 개수 M을 입력받음.
    2) 덱에 1~N만큼의 숫자를 push하는 반복문을 돔.
    3) M만큼 반복문을 돌면서 아래 내용을 반복함.
        (1) 뽑아내려는 원소의 인덱스 tmp를 입력받음.
        (2) 덱의 사이즈만큼 반복문을 돌면서 덱에서 tmp값을 찾아 그 인덱스값을 idx에 할당함. (0번째 부터 시작하기 때문에 이러한 방식으로 인덱스값을 찾아줌)
        (3) (2)에서 찾은 idx가 덱의 사이즈 / 2 보다 작다면, tmp값이 덱의 front에 올때까지 덱을 왼쪽으로 회전시킴. (왼쪽 회전은 front의 값을 rear에 push하고, front에서 pop하면 됨.) 이때, 회전시킬때마다 카운트를 저장하는 변수인 cnt에 +1을 해줌.
        (4) (2)에서 찾은 idx가 덱의 사이즈 / 2 보다 클때, tmp값이 덱의 front에 올때까지 덱을 오른쪽으로 회전시킴. (오른쪽 회전은 rear의 값을 front에 push하고, rear에서 pop하면 됨.) 이때, 회전시킬때마다 cnt에 +1을 해줌.
    4) 반복문을 빠져나왔다면 cnt를 출력함.
