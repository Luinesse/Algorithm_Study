1. 문제 인식

정수의 개수 n이 주어지고, n만큼의 수열이 주어집니다. 이 때, 한 개 이상의 수를 선택하여 연속된 수의 합 중 가장 큰 합을 구하는 문제입니다.

2. 문제 유형 파악

위 문제는 브루트포스 알고리즘 방식으로 이중 for문을 활용해 최대값을 찾아낼 수 있으나 문제에서 시간 제한이 1초로 주어져 O(N^2)인 브루트포스 알고리즘 대신 다이나믹 프로그래밍을 활용하여 해결합니다.
DP방식이 가능한 이유로는 수열의 인덱스를 증가해 가면서 직전 인덱스에서의 최대값 + 현재 인덱스 값 과 현재 인덱스 값을 비교하여 더 큰 값을 배열에 저장하면서 반복문을 진행하면 수를 1개 이상 선택하였을 때 최대값을 구할 수 있습니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 수열을 저장할 arr 배열과 DP를 수행하며 최대값을 저장할 DP 배열을 생성함.
    2) 수열의 크기 n을 입력받음.
    3) n번 반복문을 수행하며 수열을 입력받음.
    4) DP배열의 0번째는 arr배열의 0번째와 같으므로 DP[0]에 arr[0]을 할당함. (첫번째는 직전 인덱스가 없기 때문에 자기자신이 최대값.)
    5) i가 1부터 n-1 까지 도는 반복문에서 다음 내용을 수행함.
        (1) arr[i]의 값과 DP[i - 1]을 더한 값이 arr[i]보다 크다면 DP[i]에 arr[i] + DP[i - 1]을 할당함.
        (2) 위 조건에 부합하지 않는다면, DP[i] 에 arr[i]를 할당함.
    6) 최대값을 찾기 위해 최대값을 저장할 max 정수형 변수를 생성하고 DP[0]의 값을 할당함. (DP[0]이 제일 크다고 가정)
    7) i가 1부터 n-1 까지 도는 반복문에서 다음 내용을 수행함.
        (1) max 보다 DP[i]가 더크다면 max에 DP[i]를 할당함.
    8) max를 출력함.