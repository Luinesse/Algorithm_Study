1. 문제 인식

행렬의 개수 n과 행렬의 크기를 n번 입력 받습니다. 이때, 행렬을 곱하는데 필요한 최소 곱셈 연산 수를 출력하는 문제입니다.

2. 문제 유형 파악

행렬 곱셈 연산의 최소값을 찾을려면 곱을 구하는 과정에서 최소값을 선택하여야 하므로 행렬곱의 최소값을 저장하면서 최종 행렬곱 최소값을 찾는 다이나믹 프로그래밍 방식을 선택하여 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 행렬의 개수 n을 입력받는다.
    2) 입력받을 행렬의 가로, 세로를 담을 n * 2 2차원 정수 배열 matrix와 곱셈 연산 횟수의 계산을 위한 n * n 2차원 정수 배열 dp를 만든다. 이때, dp 배열은 0으로 초기화해준다.
    3) n번 반복문을 돌면서 행렬의 가로, 세로를 각각 matrix[n][0], matrix[n][1]에 할당한다.
    4) dp 배열의 대각원소는 이미 0으로 초기화 됐기 때문에, i가 1부터 n-1 까지 증가하는 반복문을 실행하며 다음 내용을 반복한다.
        (1) 대각행렬의 우측 원소들을 계산하기 위해 k가 0 부터 k + 1 까지 증가하는 반복문을 실행하며 다음 내용을 반복한다.
            [1] dp 배열에서 아래 오른쪽 대각 방향으로 내려가기 위해 정수형 변수 end에 i + k를 할당한다.
            [2] 이때 dp[k][end]에 행렬 곱셈을 수행하여 최소값을 담아야 하므로 정수 중 큰 숫자인 1e9를 할당한다.
            [3] j가 k부터 end - 1 까지 증가하는 반복문을 실행하며 다음 내용을 반복한다.
                1. 식에서 마지막에 더해지는 값을 담을 last 변수를 생성 후 last에 matrix[k][0] * matrix[j][1] * matrix[end][1] 을 할당한다.
                2. 결과를 담을 front 변수를 생성하여 dp[k][j] + dp[j+1][end] + last 를 front에 할당한다.
                3. dp[k][end]와 front 중 더 작은 값을 dp[k][end]에 할당한다.
    5) 최종적으로 곱셈이 끝나고 최소값이 들어있는 dp[0][n-1]을 출력한다.