1. 문제 인식

도화지에 선을 n번 그렸을 때, 그려진 선들의 총 길이를 구하는 문제입니다. 이때, 선들은 겹쳐서 그릴 수 있고 그 선들의 차이를 구별할 수 없습니다.

2. 문제 유형 파악

도화지에 겹쳐서 그린 선들은 구별할 수 없기 때문에, 겹쳐진 선들 중 가진 긴 선의 길이 (즉, 보이는 선들의 길이)를 전부 더하면 선의 길이를 구할 수 있습니다. 따라서, 이 문제는 스위핑 알고리즘을 사용하여 문제를 해결합니다.

3. 다이어그램 또는 알고리즘을 나열

    1) 선을 그은 횟수를 저장할 n과 결과를 저장할 res 정수형 변수를 생성한다. 이때, res는 0으로 초기화한다.
    2) n을 입력받고, int 2개를 한 쌍으로 저장하는 정수형 배열 lines를 n의 크기로 생성한다.
    3) lines[i].first와 lines[i].second에 x,y좌표를 입력받는다.
    4) lines의 내용을 lines의 first를 기준으로 오름차순 정렬한다. (sort함수에서 pair를 인자로 받으면 first, second 순으로 오름차순 정렬.)
    5) start와 end 정수형 변수를 만들고 각각 lines[0].first, lines[0].end 를 할당한다. (초기값.)
    6) i가 1부터 n-1까지 증가하며 반복하는 반복문에서 다음을 반복한다.
        (1) lines[i].first가 end보다 크다면 다음을 수행한다.
            [1] res에 end - start의 값을 더한다. (선분의 길이는 end - start)
            [2] start에 lines[i].first를 할당한다. (선분이 끊어졌다가 다시 새로운 선분을 만났기 때문에.)
            [3] end에 lines[i].end를 할당한다. (위와 같은 이유로 end또한 다시 세팅해주어야함.)
        (2) (1)의 조건에 부합하지 않는다면 end와 lines[i].second 의 값 중 더 큰값을 end에 할당한다. (선이 현재 겹쳐있고, 그중 더 긴 선분을 선택하기 위함.)
    7) res에 end - start의 값을 더한다. (반복문에서 마지막 선분은 합해주지 못했기 때문에)
    8) res를 출력한다.